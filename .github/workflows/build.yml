name: Build and Release

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        # 只安装核心依赖，避免GUI相关依赖
        pip install requests>=2.25.0 httpx>=0.24.0
    
    - name: Run basic tests
      run: |
        # 只运行最小化的测试，避免GUI依赖
        pytest tests/test_minimal.py -v

  build-linux:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Check available packages
      run: |
        echo "=== Running dependency check script ==="
        chmod +x scripts/check_dependencies.sh
        ./scripts/check_dependencies.sh
        echo ""
        echo "=== Additional WebKit package check ==="
        apt-cache search webkit2gtk || true
    
    - name: Debug pkg-config and GObject Introspection
      run: |
        echo "=== Checking pkg-config path ==="
        echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
        pkg-config --list-all | grep -i gir || true
        echo "=== Checking available .pc files ==="
        find /usr -name "*.pc" 2>/dev/null | grep -i gir || true
        echo "=== Checking GObject Introspection packages ==="
        apt-cache search gobject | grep -i introspection || true
        dpkg -l | grep -i gir || true
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        
        # 检查 Ubuntu 版本和可用包
        echo "=== System information ==="
        lsb_release -a || cat /etc/os-release
        echo "=== Available girepository packages ==="
        apt-cache search girepository | grep dev || true
        
        # 安装基础开发依赖
        sudo apt-get install -y \
          pkg-config \
          build-essential \
          libcairo2-dev \
          libcairo2 \
          libcairo-gobject2 \
          libglib2.0-dev \
          libglib2.0-0 \
          libpixman-1-dev \
          libpng-dev \
          libjpeg-dev \
          libfreetype6-dev \
          gir1.2-glib-2.0 \
          gobject-introspection
        
        # 智能选择 girepository 包
        if apt-cache show libgirepository1.0-dev >/dev/null 2>&1; then
          echo "Installing libgirepository1.0-dev (newer Ubuntu versions)"
          sudo apt-get install -y libgirepository1.0-dev
        else
          echo "Trying alternative GObject packages"
          sudo apt-get install -y \
            python3-gi-dev \
            libglib2.0-dev || true
        fi
        
        # 安装 GTK 相关包
        sudo apt-get install -y \
          gir1.2-gtk-3.0 \
          libpango1.0-dev \
          libgtk-3-0 \
          libpango-1.0-0 || true
        
        # 智能选择 WebKit 版本
        echo "=== Checking available WebKit packages ==="
        if apt-cache show libwebkit2gtk-4.1-dev >/dev/null 2>&1; then
          echo "Installing WebKit 4.1"
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            gir1.2-webkit2-4.1 \
            libwebkit2gtk-4.1-0 || true
        elif apt-cache show libwebkit2gtk-4.0-dev >/dev/null 2>&1; then
          echo "Installing WebKit 4.0"
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            gir1.2-webkit2-4.0 \
            libwebkit2gtk-4.0-37 || true
        else
          echo "No suitable WebKit version found, skipping"
        fi
        
        # 安装音频相关依赖
        sudo apt-get install -y \
          libasound2-dev \
          libpulse-dev \
          portaudio19-dev \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev || true
        
        # 验证关键依赖是否安装成功
        echo "=== Verifying installations ==="
        pkg-config --exists glib-2.0 && echo "✓ glib-2.0 found" || echo "✗ glib-2.0 missing"
        pkg-config --exists cairo && echo "✓ cairo found" || echo "✗ cairo missing"
        pkg-config --exists cairo-gobject && echo "✓ cairo-gobject found" || echo "✗ cairo-gobject missing"
        if pkg-config --exists girepository-1.0; then
          echo "✓ girepository-1.0 found"
        elif pkg-config --exists girepository-2.0; then
          echo "✓ girepository-2.0 found"
        else
          echo "✗ girepository not found"
        fi
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install briefcase
        pip install toga>=0.4.0 requests>=2.25.0 httpx>=0.24.0
        # 安装音频相关的Python包（用于Linux构建）
        pip install pygame>=2.0.0 mutagen>=1.45.0 || true
    

    - name: Build Linux app
      run: |
        echo "=== Starting Linux build process ==="
        echo "Python version: $(python --version)"
        echo "Briefcase version: $(python -m briefcase --version)"
        
        # 尝试构建
        python -m briefcase build linux || {
          echo "=== Build failed, checking logs ==="
          find . -name "*.log" -type f -exec echo "=== {} ===" \; -exec cat {} \; || true
          exit 1
        }
        
        # 尝试打包
        python -m briefcase package linux || {
          echo "=== Package failed, checking logs ==="
          find . -name "*.log" -type f -exec echo "=== {} ===" \; -exec cat {} \; || true
          exit 1
        }
        
        echo "=== Build completed successfully ==="
        ls -la dist/ || true
    
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: dist/*.deb

  build-windows:
    needs: test
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install briefcase
        pip install toga>=0.4.0 requests>=2.25.0 httpx>=0.24.0
    
    - name: Build Windows app
      run: |
        python -m briefcase build windows
        python -m briefcase package windows
    
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: dist/*.msi

  build-macos:
    needs: test
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install briefcase
        pip install toga>=0.4.0 requests>=2.25.0 httpx>=0.24.0
    
    - name: Build macOS app
      run: |
        python -m briefcase build macOS
        # 使用 ad-hoc 签名（适用于开发和测试），不需要交互输入
        python -m briefcase package macOS --adhoc-sign --no-input
    
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: dist/*.dmg

  build-ios:
    needs: test
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install briefcase
        pip install toga>=0.4.0 requests>=2.25.0 httpx>=0.24.0
    
    - name: Create iOS app
      run: |
        python -m briefcase create iOS
    
    - name: Build iOS app
      run: |
        python -m briefcase build iOS
      continue-on-error: true  # iOS构建可能因为缺少证书而失败
    
    - name: Upload iOS artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ios-build
        path: |
          nextcloud-music-player/iOS/
          build/
        retention-days: 7

  build-android:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Check available Cairo packages
      run: |
        echo "=== Checking available Cairo packages ==="
        apt-cache search cairo | grep -i gobject || true
        apt-cache search libcairo || true
    
    - name: Debug pkg-config and GObject Introspection
      run: |
        echo "=== Checking pkg-config path ==="
        echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
        pkg-config --list-all | grep -i gir || true
        echo "=== Checking available .pc files ==="
        find /usr -name "*.pc" 2>/dev/null | grep -i gir || true
        find /usr -name "girepository*.pc" 2>/dev/null || true
        echo "=== Checking GObject Introspection packages ==="
        apt-cache search gobject | grep -i introspection || true
        dpkg -l | grep -i gir || true
        echo "=== Testing pkg-config for girepository-2.0 ==="
        pkg-config --exists girepository-2.0 && echo "Found!" || echo "Not found"
        echo "=== Looking for girepository .pc files ==="
        find /usr -name "*girepository*.pc" 2>/dev/null || true
        echo "=== Checking pkg-config search path ==="
        pkg-config --variable pc_path pkg-config || true
        echo "=== Trying to locate girepository-2.0.pc ==="
        locate girepository-2.0.pc 2>/dev/null || find /usr -name "girepository-2.0.pc" 2>/dev/null || true
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        
        # 检查 Ubuntu 版本
        echo "=== Ubuntu version ==="
        lsb_release -a || cat /etc/os-release
        
        # 检查哪些 girepository 包可用
        echo "=== Available girepository packages ==="
        apt-cache search girepository | grep dev || true
        
        # 首先安装基础依赖
        sudo apt-get install -y \
          pkg-config \
          build-essential \
          libffi-dev \
          libcairo2-dev \
          libcairo2 \
          libcairo-gobject2 \
          libglib2.0-dev \
          libglib2.0-0 \
          libpixman-1-dev \
          libpng-dev \
          libjpeg-dev \
          libfreetype6-dev \
          gir1.2-glib-2.0 \
          gobject-introspection
        
        # 根据 Ubuntu 版本安装合适的 girepository 包
        if apt-cache show libgirepository1.0-dev >/dev/null 2>&1; then
          echo "Installing libgirepository1.0-dev (Ubuntu 22.04+)"
          sudo apt-get install -y libgirepository1.0-dev
        elif apt-cache show libgirepository-2.0-dev >/dev/null 2>&1; then
          echo "Installing libgirepository-2.0-dev (Ubuntu 20.04)"
          sudo apt-get install -y libgirepository-2.0-dev
        else
          echo "Installing fallback GObject Introspection packages"
          sudo apt-get install -y \
            libglib2.0-dev \
            python3-gi-dev || true
        fi
        
        # 安装 GTK 相关包
        sudo apt-get install -y gir1.2-gtk-3.0 || true
        
        # 验证关键依赖
        echo "=== Verifying Android build dependencies ==="
        pkg-config --exists glib-2.0 && echo "✓ glib-2.0 found" || echo "✗ glib-2.0 missing"
        pkg-config --exists cairo && echo "✓ cairo found" || echo "✗ cairo missing"
        if pkg-config --exists girepository-1.0; then
          echo "✓ girepository-1.0 found"
        elif pkg-config --exists girepository-2.0; then
          echo "✓ girepository-2.0 found" 
        else
          echo "⚠ girepository not found - Android build may still succeed"
        fi
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        log-accepted-android-sdk-licenses: false

    - name: Accept Android SDK licenses
      run: |
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true

    - name: Install Android SDK components
      run: |
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
          "platforms;android-33" \
          "build-tools;33.0.0" \
          "cmake;3.22.1" \
          "ndk;25.1.8937393"

    - name: Set Android environment variables
      run: |
        echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
        echo "ANDROID_NDK_ROOT=$ANDROID_HOME/ndk/25.1.8937393" >> $GITHUB_ENV

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install briefcase
        pip install toga>=0.4.0 requests>=2.25.0 httpx>=0.24.0
    
    - name: Create Android app
      run: |
        python -m briefcase create android
    
    - name: Build Android app
      run: |
        python -m briefcase build android
      continue-on-error: true  # Android构建可能因为环境配置而失败
    
    - name: Package Android app
      run: |
        python -m briefcase package android
      continue-on-error: true
    
    - name: Upload Android artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: android-build
        path: |
          nextcloud-music-player/android/
          nextcloud-music-player/android/gradle/app/build/outputs/apk/**/*.apk
        retention-days: 7

  # 发布开发版本（推送到 main/master 分支时）
  publish-dev:
    if: always() && (needs.build-linux.result == 'success' || needs.build-windows.result == 'success' || needs.build-macos.result == 'success' || needs.build-ios.result == 'success' || needs.build-android.result == 'success')
    needs: [build-linux, build-windows, build-macos, build-ios, build-android]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create development release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: dev-${{ github.sha }}
        name: Development Build ${{ github.sha }}
        body: |
          Development build from commit ${{ github.sha }}
          
          This is an automated development release. Use at your own risk.
          
          **📦 Available Downloads:**
          - **Desktop**: Linux (.deb), Windows (.msi), macOS (.dmg)
          - **Mobile**: iOS (source/project files), Android (.apk if available)
          
          **Note**: Mobile builds may not contain signed packages and are for development/testing purposes.
          
          **Changes:**
          ${{ github.event.head_commit.message }}
        files: |
          artifacts/linux-build/**/*.deb
          artifacts/windows-build/**/*.msi
          artifacts/macos-build/**/*.dmg
          artifacts/ios-build/**/*
          artifacts/android-build/**/*.apk
        prerelease: true
        token: ${{ secrets.GITHUB_TOKEN }}

  # 发布正式版本（创建 tag 时）
  publish-release:
    if: github.event_name == 'release'
    needs: [build-linux, build-windows, build-macos, build-ios, build-android]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/linux-build/**/*.deb
          artifacts/windows-build/**/*.msi
          artifacts/macos-build/**/*.dmg
          artifacts/ios-build/**/*
          artifacts/android-build/**/*.apk
        token: ${{ secrets.GITHUB_TOKEN }}
