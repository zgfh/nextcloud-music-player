name: Code Quality

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run dependency check
      run: |
        chmod +x scripts/check_dependencies.sh
        ./scripts/check_dependencies.sh
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        
        # 检查 Ubuntu 版本
        echo "=== System information ==="
        lsb_release -a || cat /etc/os-release
        
        # 获取 Ubuntu 版本
        UBUNTU_VERSION=$(lsb_release -rs 2>/dev/null || echo "unknown")
        echo "Ubuntu version: $UBUNTU_VERSION"
        
        # 安装基础依赖
        echo "=== Installing base dependencies ==="
        sudo apt-get install -y \
          git \
          build-essential \
          pkg-config \
          python3-dev \
          python3-venv \
          libcairo2-dev \
          gir1.2-gtk-3.0 \
          libcanberra-gtk3-module \
          libglib2.0-dev \
          gobject-introspection
        
        # 根据 Ubuntu 版本选择正确的 girepository 包
        echo "=== Installing girepository package based on Ubuntu version ==="
        if [[ "$UBUNTU_VERSION" =~ ^(24\.|25\.|26\.) ]]; then
          echo "Ubuntu 24.04+ detected - using libgirepository-2.0-dev"
          sudo apt-get install -y libgirepository-2.0-dev || {
            echo "libgirepository-2.0-dev not available, trying libgirepository1.0-dev"
            sudo apt-get install -y libgirepository1.0-dev
          }
        else
          echo "Ubuntu 22.04 or earlier detected - using libgirepository1.0-dev"
          sudo apt-get install -y libgirepository1.0-dev || {
            echo "libgirepository1.0-dev not available, trying libgirepository-2.0-dev"
            sudo apt-get install -y libgirepository-2.0-dev
          }
        fi
        
        # 补充其他必要的依赖
        echo "=== Installing additional dependencies ==="
        sudo apt-get install -y \
          libpango1.0-dev \
          libgtk-3-dev || true
        
        # 验证关键依赖是否安装成功
        echo "=== Verifying installations ==="
        pkg-config --exists glib-2.0 && echo "✓ glib-2.0 found" || echo "✗ glib-2.0 missing"
        pkg-config --exists cairo && echo "✓ cairo found" || echo "✗ cairo missing"
        pkg-config --exists cairo-gobject && echo "✓ cairo-gobject found" || echo "✗ cairo-gobject missing"
        if pkg-config --exists girepository-1.0; then
          echo "✓ girepository-1.0 found"
        elif pkg-config --exists girepository-2.0; then
          echo "✓ girepository-2.0 found"
        else
          echo "✗ girepository not found"
        fi
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        # 仅安装代码质量检查需要的核心依赖，避免GUI依赖
        pip install requests>=2.25.0 httpx>=0.24.0
        # 尝试安装 toga，但如果失败不中断构建
        pip install toga>=0.4.0 || echo "Warning: toga installation failed, continuing with code quality checks"
    
    - name: Lint with flake8
      run: |
        # 停止构建如果有Python语法错误或未定义的名称
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # 退出时显示警告，但不停止构建
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff src/
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff src/
    
    - name: Type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports
      continue-on-error: true  # mypy检查失败不阻止构建

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        
        # 检查 Ubuntu 版本
        echo "=== System information ==="
        lsb_release -a || cat /etc/os-release
        
        # 获取 Ubuntu 版本
        UBUNTU_VERSION=$(lsb_release -rs 2>/dev/null || echo "unknown")
        echo "Ubuntu version: $UBUNTU_VERSION"
        
        # 安装基础依赖
        echo "=== Installing base dependencies ==="
        sudo apt-get install -y \
          git \
          build-essential \
          pkg-config \
          python3-dev \
          python3-venv \
          libcairo2-dev \
          gir1.2-gtk-3.0 \
          libcanberra-gtk3-module \
          libglib2.0-dev \
          gobject-introspection
        
        # 根据 Ubuntu 版本选择正确的 girepository 包
        echo "=== Installing girepository package based on Ubuntu version ==="
        if [[ "$UBUNTU_VERSION" =~ ^(24\.|25\.|26\.) ]]; then
          echo "Ubuntu 24.04+ detected - using libgirepository-2.0-dev"
          sudo apt-get install -y libgirepository-2.0-dev || {
            echo "libgirepository-2.0-dev not available, trying libgirepository1.0-dev"
            sudo apt-get install -y libgirepository1.0-dev
          }
        else
          echo "Ubuntu 22.04 or earlier detected - using libgirepository1.0-dev"
          sudo apt-get install -y libgirepository1.0-dev || {
            echo "libgirepository1.0-dev not available, trying libgirepository-2.0-dev"
            sudo apt-get install -y libgirepository-2.0-dev
          }
        fi
        
        # 补充其他必要的依赖
        echo "=== Installing additional dependencies ==="
        sudo apt-get install -y \
          libpango1.0-dev \
          libgtk-3-dev || true
        
        # 验证关键依赖是否安装成功
        echo "=== Verifying installations ==="
        pkg-config --exists glib-2.0 && echo "✓ glib-2.0 found" || echo "✗ glib-2.0 missing"
        pkg-config --exists cairo && echo "✓ cairo found" || echo "✗ cairo missing"
        pkg-config --exists cairo-gobject && echo "✓ cairo-gobject found" || echo "✗ cairo-gobject missing"
        if pkg-config --exists girepository-1.0; then
          echo "✓ girepository-1.0 found"
        elif pkg-config --exists girepository-2.0; then
          echo "✓ girepository-2.0 found"
        else
          echo "✗ girepository not found"
        fi
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        # 仅安装安全检查需要的核心依赖，避免GUI依赖
        pip install requests>=2.25.0 httpx>=0.24.0
        # 尝试安装 toga，但如果失败不中断构建
        pip install toga>=0.4.0 || echo "Warning: toga installation failed, continuing with security checks"
    
    - name: Security linting with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Check dependencies for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
